// <auto-generated />
using System;
using MVCTask.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCTask.Migrations
{
    [DbContext(typeof(iticontext))]
    partial class iticontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVCTask.Models.department", b =>
                {
                    b.Property<int>("DNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DNum"));

                    b.Property<int?>("MGRSSN")
                        .HasColumnType("int");

                    b.Property<DateOnly>("MGRStartDate")
                        .HasColumnType("date");

                    b.Property<string>("dName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DNum");

                    b.HasIndex("MGRSSN");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MVCTask.Models.department_location", b =>
                {
                    b.Property<int>("Dnumber")
                        .HasColumnType("int");

                    b.Property<string>("Dloaction")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("departmentDNum")
                        .HasColumnType("int");

                    b.HasKey("Dnumber", "Dloaction");

                    b.HasIndex("departmentDNum");

                    b.ToTable("dep_loc");
                });

            modelBuilder.Entity("MVCTask.Models.dependent", b =>
                {
                    b.Property<string>("dependentName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("essn")
                        .HasColumnType("int");

                    b.Property<string>("realation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("dependentName");

                    b.HasIndex("essn");

                    b.ToTable("Dependents");
                });

            modelBuilder.Entity("MVCTask.Models.employee", b =>
                {
                    b.Property<int>("ssn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ssn"));

                    b.Property<DateOnly>("BDate")
                        .HasColumnType("date");

                    b.Property<int?>("DNO")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("salary")
                        .HasColumnType("int");

                    b.Property<int?>("supeerSSN")
                        .HasColumnType("int");

                    b.HasKey("ssn");

                    b.HasIndex("DNO");

                    b.HasIndex("supeerSSN");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MVCTask.Models.project", b =>
                {
                    b.Property<int>("Pnum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pnum"));

                    b.Property<int>("Dnum")
                        .HasColumnType("int");

                    b.Property<string>("Plocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pnum");

                    b.HasIndex("Dnum");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MVCTask.Models.works_on", b =>
                {
                    b.Property<int>("Essn")
                        .HasColumnType("int");

                    b.Property<int>("pno")
                        .HasColumnType("int");

                    b.Property<int>("hours")
                        .HasColumnType("int");

                    b.HasKey("Essn", "pno");

                    b.HasIndex("pno");

                    b.ToTable("WOn");
                });

            modelBuilder.Entity("MVCTask.Models.department", b =>
                {
                    b.HasOne("MVCTask.Models.employee", "Employee")
                        .WithMany("Departments")
                        .HasForeignKey("MGRSSN");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MVCTask.Models.department_location", b =>
                {
                    b.HasOne("MVCTask.Models.department", null)
                        .WithMany("de_locat")
                        .HasForeignKey("departmentDNum");
                });

            modelBuilder.Entity("MVCTask.Models.dependent", b =>
                {
                    b.HasOne("MVCTask.Models.employee", "employee")
                        .WithMany("dependents")
                        .HasForeignKey("essn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("MVCTask.Models.employee", b =>
                {
                    b.HasOne("MVCTask.Models.department", "department")
                        .WithMany("Employees")
                        .HasForeignKey("DNO");

                    b.HasOne("MVCTask.Models.employee", "employee_super")
                        .WithMany("Employees")
                        .HasForeignKey("supeerSSN");

                    b.Navigation("department");

                    b.Navigation("employee_super");
                });

            modelBuilder.Entity("MVCTask.Models.project", b =>
                {
                    b.HasOne("MVCTask.Models.department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("Dnum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("MVCTask.Models.works_on", b =>
                {
                    b.HasOne("MVCTask.Models.employee", "employee")
                        .WithMany("won")
                        .HasForeignKey("Essn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCTask.Models.project", "projects")
                        .WithMany("wOn")
                        .HasForeignKey("pno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("projects");
                });

            modelBuilder.Entity("MVCTask.Models.department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Projects");

                    b.Navigation("de_locat");
                });

            modelBuilder.Entity("MVCTask.Models.employee", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("dependents");

                    b.Navigation("won");
                });

            modelBuilder.Entity("MVCTask.Models.project", b =>
                {
                    b.Navigation("wOn");
                });
#pragma warning restore 612, 618
        }
    }
}
